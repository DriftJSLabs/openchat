'use client';

import * as React from 'react';
import { Send, Loader2, StopCircle } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { ModelSwitcher } from '@/components/model-switcher';
import { cn } from '@/lib/utils';

interface ChatInputProps {
  value: string;
  onChange: (value: string) => void;
  onSubmit: (e: React.FormEvent) => void;
  onStop?: () => void;
  isLoading?: boolean;
  isConnected?: boolean;
  selectedModel?: string;
  onModelChange?: (model: string) => void;
  placeholder?: string;
  disabled?: boolean;
  className?: string;
}

export function ChatInput({
  value,
  onChange,
  onSubmit,
  onStop,
  isLoading = false,
  isConnected = true,
  selectedModel,
  onModelChange,
  placeholder,
  disabled = false,
  className,
}: ChatInputProps) {
  const [localValue, setLocalValue] = React.useState(value || '');

  React.useEffect(() => {
    setLocalValue(value || '');
  }, [value]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = e.target.value;
    setLocalValue(newValue);
    onChange(newValue);
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (localValue.trim() && !isLoading && isConnected) {
      onSubmit(e);
    }
  };

  return (
    <form onSubmit={handleSubmit} className={cn("flex gap-2", className)}>
      <div className="flex-1 flex items-center rounded-full border border-border bg-card focus-within:ring-2 focus-within:ring-ring transition-all">
        {isConnected && selectedModel && onModelChange && (
          <>
            <ModelSwitcher 
              selectedModel={selectedModel} 
              onModelChange={onModelChange} 
              compact={true}
            />
            <div className="h-6 w-px bg-border mx-2" />
          </>
        )}
        <input
          type="text"
          value={localValue}
          onChange={handleChange}
          placeholder={
            placeholder || 
            (isConnected 
              ? `Message ${selectedModel?.split('/').pop() || 'AI'}...` 
              : "Connect to start chatting...")
          }
          className="flex-1 bg-transparent px-4 py-2.5 text-sm placeholder:text-muted-foreground focus:outline-none"
          disabled={disabled || isLoading || !isConnected}
        />
      </div>
      {isLoading && onStop ? (
        <Button
          type="button"
          size="icon"
          variant="destructive"
          className="rounded-full h-10 w-10 transition-all hover:scale-110 active:scale-95"
          onClick={onStop}
        >
          <StopCircle className="h-4 w-4" />
        </Button>
      ) : (
        <Button
          type="submit"
          size="icon"
          className="rounded-full h-10 w-10 transition-all hover:scale-110 active:scale-95"
          disabled={!localValue.trim() || isLoading || !isConnected || disabled}
        >
          {isLoading ? (
            <Loader2 className="h-4 w-4 animate-spin" />
          ) : (
            <Send className="h-4 w-4" />
          )}
        </Button>
      )}
    </form>
  );
}