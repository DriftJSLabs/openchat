# ElectricSQL Migration Configuration for OpenChat
# This file defines how to migrate existing data and schema for ElectricSQL compatibility

# =============================================================================
# MIGRATION METADATA
# =============================================================================

migration:
  name: "openchat_electric_integration"
  version: "1.0.0"
  description: "Initial ElectricSQL integration for OpenChat application"
  author: "OpenChat Development Team"
  created_at: "2025-01-23"

# =============================================================================
# SCHEMA MIGRATIONS
# =============================================================================

schema:
  # Pre-migration validation checks
  pre_checks:
    - name: "check_wal_level"
      description: "Ensure PostgreSQL has logical replication enabled"
      query: "SELECT current_setting('wal_level') = 'logical'"
      
    - name: "check_max_replication_slots"
      description: "Ensure sufficient replication slots are available"
      query: "SELECT current_setting('max_replication_slots')::int >= 10"
      
    - name: "check_required_tables"
      description: "Verify all required tables exist"
      tables:
        - "user"
        - "chat"
        - "message"
        - "user_preferences"
        - "chat_analytics"
        - "sync_config" 
        - "device"
        - "ai_usage"

  # Schema modifications required for ElectricSQL
  modifications:
    # Add Electric-specific columns if not present
    - table: "chat"
      columns:
        - name: "_electric_sync_id"
          type: "UUID"
          default: "gen_random_uuid()"
          description: "ElectricSQL sync identifier"
          
    - table: "message" 
      columns:
        - name: "_electric_sync_id"
          type: "UUID"
          default: "gen_random_uuid()"
          description: "ElectricSQL sync identifier"
          
    # Ensure all timestamp columns are properly configured
    - table: "all"
      modifications:
        - name: "standardize_timestamps"
          description: "Ensure all timestamp columns use UTC timezone"
          action: "ALTER TABLE {table} ALTER COLUMN created_at TYPE timestamptz USING created_at AT TIME ZONE 'UTC'"
          
  # Indexes required for optimal ElectricSQL performance
  indexes:
    - table: "chat"
      name: "idx_chat_electric_sync"
      columns: ["_electric_sync_id"]
      unique: true
      
    - table: "message"
      name: "idx_message_electric_sync" 
      columns: ["_electric_sync_id"]
      unique: true
      
    # User-based filtering indexes for RLS performance
    - table: "chat"
      name: "idx_chat_user_electric"
      columns: ["user_id", "updated_at"]
      where: "is_deleted = false"
      
    - table: "message"
      name: "idx_message_chat_electric"
      columns: ["chat_id", "created_at"]
      where: "is_deleted = false"

# =============================================================================
# DATA MIGRATION STRATEGIES
# =============================================================================

data:
  # Migration strategy for existing data
  strategy: "incremental"  # Options: full, incremental, lazy
  
  # Batch processing configuration
  batch_size: 1000
  parallel_workers: 4
  
  # Data transformation rules
  transformations:
    # Ensure all UUIDs are properly formatted
    - table: "chat"
      column: "id"
      transformation: "COALESCE(id, gen_random_uuid())"
      
    - table: "message"
      column: "id" 
      transformation: "COALESCE(id, gen_random_uuid())"
      
    # Standardize boolean values
    - table: "chat"
      column: "is_deleted"
      transformation: "COALESCE(is_deleted, false)"
      
    # Set default values for new columns
    - table: "user_preferences"
      column: "allow_analytics"
      transformation: "COALESCE(allow_analytics, true)"

  # Data validation rules
  validation:
    # Check for orphaned records
    - name: "validate_message_chat_refs"
      description: "Ensure all messages reference valid chats"
      query: |
        SELECT COUNT(*) = 0 FROM message m 
        LEFT JOIN chat c ON m.chat_id = c.id 
        WHERE c.id IS NULL
        
    - name: "validate_chat_user_refs"
      description: "Ensure all chats reference valid users"
      query: |
        SELECT COUNT(*) = 0 FROM chat c
        LEFT JOIN "user" u ON c.user_id = u.id
        WHERE u.id IS NULL
        
    # Check for duplicate sync IDs
    - name: "validate_unique_sync_ids"
      description: "Ensure Electric sync IDs are unique"
      query: |
        SELECT 
          (SELECT COUNT(DISTINCT _electric_sync_id) = COUNT(*) FROM chat) AND
          (SELECT COUNT(DISTINCT _electric_sync_id) = COUNT(*) FROM message)

# =============================================================================
# REPLICATION SETUP
# =============================================================================

replication:
  # Replication slot configuration
  slots:
    - name: "electric_main_slot"
      plugin: "pgoutput"
      temporary: false
      
  # Publication configuration
  publications:
    - name: "electric_publication"
      tables: 
        - "user"
        - "chat" 
        - "message"
        - "user_preferences"
        - "chat_analytics"
        - "sync_config"
        - "device"
        - "ai_usage"
      operations: ["INSERT", "UPDATE", "DELETE"]
      
  # Row Level Security setup
  rls:
    enable_on_tables:
      - "chat"
      - "message" 
      - "user_preferences"
      - "chat_analytics"
      - "sync_config"
      - "device"
      - "ai_usage"
      
    policies:
      - table: "chat"
        name: "chat_user_isolation"
        operation: "ALL"
        using: "user_id = current_setting('electric.user_id', true)"
        
      - table: "message"
        name: "message_user_isolation"
        operation: "ALL"
        using: |
          chat_id IN (
            SELECT id FROM chat 
            WHERE user_id = current_setting('electric.user_id', true)
          )

# =============================================================================
# ROLLBACK CONFIGURATION
# =============================================================================

rollback:
  # Enable automatic rollback on migration failure
  auto_rollback: true
  
  # Rollback strategy
  strategy: "backup_restore"  # Options: backup_restore, transaction, manual
  
  # Backup configuration for rollback
  backup:
    # Tables to backup before migration
    tables:
      - "user"
      - "chat"
      - "message"
      - "user_preferences" 
      - "chat_analytics"
      - "sync_config"
      - "device"
      - "ai_usage"
      
    # Backup location
    location: "/tmp/openchat_migration_backup"
    
    # Compression settings
    compression: true
    format: "custom"  # PostgreSQL custom format
    
  # Rollback scripts
  scripts:
    - name: "remove_electric_columns"
      description: "Remove ElectricSQL-specific columns"
      sql: |
        ALTER TABLE chat DROP COLUMN IF EXISTS _electric_sync_id;
        ALTER TABLE message DROP COLUMN IF EXISTS _electric_sync_id;
        
    - name: "drop_electric_indexes"
      description: "Remove ElectricSQL-specific indexes"
      sql: |
        DROP INDEX IF EXISTS idx_chat_electric_sync;
        DROP INDEX IF EXISTS idx_message_electric_sync;
        DROP INDEX IF EXISTS idx_chat_user_electric;
        DROP INDEX IF EXISTS idx_message_chat_electric;
        
    - name: "disable_rls"
      description: "Disable Row Level Security"
      sql: |
        ALTER TABLE chat DISABLE ROW LEVEL SECURITY;
        ALTER TABLE message DISABLE ROW LEVEL SECURITY;
        ALTER TABLE user_preferences DISABLE ROW LEVEL SECURITY;
        ALTER TABLE chat_analytics DISABLE ROW LEVEL SECURITY;
        ALTER TABLE sync_config DISABLE ROW LEVEL SECURITY;
        ALTER TABLE device DISABLE ROW LEVEL SECURITY;
        ALTER TABLE ai_usage DISABLE ROW LEVEL SECURITY;

# =============================================================================
# MONITORING AND ALERTING
# =============================================================================

monitoring:
  # Migration progress tracking
  progress:
    # Enable progress reporting
    enabled: true
    # Progress reporting interval
    interval: "10s"
    # Progress persistence (for resumable migrations)
    persist: true
    
  # Health checks during migration
  health_checks:
    - name: "replication_lag"
      description: "Monitor replication lag during migration"
      threshold: "10s"
      
    - name: "connection_count"
      description: "Monitor database connections"
      threshold: 100
      
    - name: "disk_space"
      description: "Monitor available disk space"
      threshold: "10GB"
      
  # Alerting configuration
  alerts:
    # Alert channels
    channels:
      - type: "log"
        level: "error"
        
      - type: "webhook"
        url: "${WEBHOOK_URL}"
        headers:
          "Content-Type": "application/json"
          
    # Alert conditions
    conditions:
      - name: "migration_failure"
        description: "Alert when migration fails"
        trigger: "migration.status == 'failed'"
        
      - name: "high_replication_lag"
        description: "Alert when replication lag is high"
        trigger: "replication.lag > '30s'"

# =============================================================================
# POST-MIGRATION VALIDATION
# =============================================================================

post_migration:
  # Validation tests to run after migration
  validation_tests:
    - name: "test_shape_subscriptions"
      description: "Test basic shape subscription functionality"
      timeout: "30s"
      
    - name: "test_user_data_isolation"
      description: "Verify RLS policies work correctly"
      timeout: "10s"
      
    - name: "test_replication_lag"
      description: "Ensure replication lag is acceptable"
      threshold: "5s"
      
  # Performance benchmarks
  benchmarks:
    - name: "shape_subscription_latency"
      description: "Measure shape subscription setup time"
      target: "< 1s"
      
    - name: "data_sync_throughput"
      description: "Measure data synchronization rate"
      target: "> 1000 ops/s"
      
  # Cleanup tasks
  cleanup:
    - name: "remove_migration_artifacts"
      description: "Clean up temporary migration files"
      
    - name: "optimize_tables"
      description: "Run VACUUM and ANALYZE on migrated tables"
      
    - name: "update_statistics"
      description: "Update table statistics for query planner"